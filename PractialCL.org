* Syntax and Semantics
** Breaking open the black box
   Instead of a single black box that goes from text to program
   behavior in one step, Common Lisp defines *two* black boxes, one
   that translates text into Lisp objects and another that implements
   the semantics of the language in terms of those objects. The first
   box is called the /reader/, and the second is called the
   /evaluator/.

   Each black box defines one level of syntax. The reader defines how
   strings of characters can be translated into Lisp objects called
   /s-expressions/.

   The evaluator then defines a syntax of Lisp /forms/ that can be
   built out of s-expressiosn.

   The split of the black box has a couple of consequences. One is
   that you can use s-expressions as an externalizable data format for
   data other than source code. The other consequence is that since
   the semantics of the language are defined in terms of trees of
   objects rather than strings of characters, it's easier to generate
   code within the language than it would be if you had to generate
   code as text. The real win is that you can generate code by
   manipulating existing data.

   Names used in Lisp programs, such as FORMAT are represented by
   objects called /symbols/. The reader knows nothing about how a
   given name is going to be used--whether it's the name of a
   variable, a function, or something else. It just reads a sequence
   of characters and builds an object to represent the name.

   Two important characteristics of the way the reader translates
   names to symbol objects have to do with:
   - how it treats the case of letters in name
	While reading names, the reader converts all unescaped characters
	in a name to their uppercase equivalents.
   - how it ensures that the same name is always read as the same
     symbol
	To ensure that the same textual name is always read as the same
     symbol, the reader /interns/ symbols--after it has read the name
     and converted it to all uppercase, the reader looks in a table
     called a /package/ for an existing symbol with the same name. If
     it can't find one, it creates a new symbol and adds it to the
     table. Otherwise, it returns the symbol already in the
     table. Thus, anywhere the same name appers in any s-expression,
     the same object will be used to represent it.
** S-expressions As Lisp Forms
   Common Lisp's evaluation rule defines a second level of syntax that
   determines which s-expressions can be treated as Lisp forms.

   Any atom---any nonlist or the empty list---is a legal Lisp form as
   is any list that has a symbol as its first element.
** Special Operators
   Not all operations can be defined as functions. Because all the
   arguments to a function are evaluated before the function is
   called.

** Macros
   While special operators extend the syntax of Common Lisp beyond
   what can be expressed with just function calls, the set of special
   operators is fixed by the language standard. Macros, on the other
   hand, give users of the language a way to extend its syntax.

   A macro is a function that takes s-expressions as arguments and
   returns a Lisp form that's then evaluated in place of the macro
   form.

   The evaluation of a macro form proceeds in two phases:
   - the elements of the macro form are passed, unevaluated, to the
     macro function
   - the form returned by the macro function--called its /expansion/
     is evaluated according to the normal evaluation rules.
** 
