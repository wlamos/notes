* Observer

** Head first Design Pattern
*** Definition
The observer pattern defines a one-to-many dependency between objects so that when one object changes state,
all of its dependents are notified and updated automatically.
subject

*** The power of Loose Coupling

When two objects are loosely coupled, they can interact, but have very little knowledge of each other.

The Observer Pattern provides an object design where subjects and observers are loosely coupled.

*** Design Principle

:Strive for loosely coupled designs between objects that interact

** GOF

*** Alias
Dependents, Publish-Subscribe
*** 动机
将一个系统分割成一系列相互协作的类有一个常见的副作用：需要维护相关对象间的一致性，但这样使各类紧密耦合，降低了
它们的可重用性。

*** 适用性

1. 当一个抽象模型有两个方面，其中一个方面依赖与另一方面。将这二者封装在独立的对象中以使它们可以各自独立的改变和复用。
2. 当一个对象的改变同时需要改变其他对象，而不知具体有多少对象需要改变。
3. 当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，你不希望这些对象是紧密耦合的。

Remember, knowing concepts like abstraction, inheritance,
and polymorphism do not make you a good object oriented
designer. A design guru thinks about how to create flexible
designs that are maintainable and that can cope with change.

* Factory
** Head First Design Pattern
*** Factory Method
A factory method handles object creation and encapsulates it in a subclass.

:Product_type factoryMethod (string type) = 0;

A factory method is abstract so the subclasses are counted on to handle object
creation.

A factory method returns a Product that is typically used within methods defined
in the superclass.

A factory method isolates the client (the code in the superclass, like
orderPizza()) from knowing what kind of concrete Product is actually created.

A factory method may be parameterized (or not) to select among several
variations of a product.

All factory patterns encapsulate object creation. The Factory Method Pattern
encapsulates object creation by letting gsubclassed decide what objects to create.


**** Definition of Factory Method Pattern
The Factory Method Pattern defines an interface for creating an object, but lets
subclasses decide which class to instantiate. Factory Method lets a class defer
instantiation to subclasses.
